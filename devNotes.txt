Check installation
------------------
node -v
npm -v


Create new node project/package
-------------------------------
npm init
- creates package.json
- entry point (index.js) -> property 'main' in package.json


Create entry point
------------------
index.js
- console.log('hello world');


Test entry point
----------------
node index.js
Entry points may be different across projects.
So define an alias for the 'start' lifecycle script


Lifecycle scripts
-----------------
Define alias in package.json 'scripts' object
- "start": "node index.js"

'test' alias already defined
- "test": "echo \"Error: no test specified\" && exit 1"

Lifecycle scripts invoked as follows:
- npm <lifecycle script name> e.g. npm start


Non lifecycle scripts
---------------------
Define alias in package.json 'scripts' object
- "myCustomScript": "echo \"Hello from my custom script\" && exit 1"

Non lifecycle scripts invoked as follows:
- npm run <custom script name> e.g. npm run myCustomScript


Install express
---------------
npm install express
- adds entry into package.json 'dependencies' object. e.g. "express": "^4.17.1"
- creates node_modules folder
- contains express + loads of other stuff (dependencies)


Define express as required by my entry point
--------------------------------------------
const express = require('express');
const app = express();


Install mongoDB
---------------
Simple msi - install as windows service
mongo.exe to access db
- show databases
- use newDB
- db.items.insert({name:"name"});
- db.items.find();


Access mongoDB from node
------------------------
Use mongoose
- npm install mongoose
- const mongoose = require('mongoose);
- mongoose.connect( process.env.DATABASE_URL, {useNewUrlParser: true} );  // local for dev or deployed on web - use environment variable
  - npm install --save-dev dotenv - environment variable functionality
  - define environment variables in .env file - DATABASE_URL=mongodb://localhost/<dbname>
  - at top of file : if (process.env.NODE_ENV !== 'production' {require('dotenv').load()})
- const db = mongoose.connection();
- db.on('error', error => console.error(error));
- db.once('open', () => console.log('Connected to mongoose!'));

Define routing & middleware
---------------------------
see learnMiddleware.js


Initialise node server
----------------------
app.listen(3000);


========================================
Response object
---------------
var body = 'hello world';
var content_length = body.length;
res.writeHead(200, {
    'Content-Length': content_length,
    'Content-Type': 'text/plain'
});
res.end(body);
---
res.send('<h1>hello world</h1>');
---
res.json( "jsonkey":"jsonvalue");
========================================


Authentication (least to most complex)
========================================
Options
- session         (passport local strategy) 
  Authentication - who is the user
- JSON web tokens (passport jwt strategy)
  Authentication - who is the user
- oAuth 
  Attempts to separate out the 2 components (Authentication and Authprisation) I think
  - In-House
  - Saas (s/w as a service)
- Other/ad-hoc
========================================


HTP header - see MDN
========================================
General headers
- can be request or response related
- meta data about the request
Response headers
- server creates a response header
- e.g. content Type
       cookie information
Request headers
- refresh google -> browser creates a request header
- e.g. specifies what kind of data I accept
       cookie information ( can set using document.cookie )
       user-agent. i.e. which browser

========================================


Express session
========================================
========================================

